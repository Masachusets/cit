# type: ignore
"""Created equipments.asignment_number

Revision ID: 8f45dad9fd37
Revises: 7751a1c9e3fc
Create Date: 2025-02-16 09:56:33.335702+00:00

"""

from __future__ import annotations

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import (
    EncryptedString,
    EncryptedText,
    GUID,
    ORA_JSONB,
    DateTimeUTC,
)
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    pass

__all__ = [
    "downgrade",
    "upgrade",
    "schema_upgrades",
    "schema_downgrades",
    "data_upgrades",
    "data_downgrades",
]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = "8f45dad9fd37"
down_revision = "7751a1c9e3fc"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "equipments",
        sa.Column("it", sa.String(length=7), nullable=False),
        sa.Column(
            "name_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("model", sa.String(), nullable=True),
        sa.Column("serial_number", sa.String(length=50), nullable=False),
        sa.Column("manufacture_date", sa.String(length=7), nullable=True),
        sa.Column("arrival_date", sa.String(length=7), nullable=True),
        sa.Column(
            "document_in_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=True,
        ),
        sa.Column(
            "document_out_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=True,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "EXPLOITED",
                "INTERNET",
                "SVT",
                "FAULTY",
                "RESERVE",
                "WRITE_OFF",
                name="equipmentstatus",
            ),
            nullable=False,
        ),
        sa.Column("employee_id", sa.String(), nullable=True),
        sa.Column("department_id", sa.String(), nullable=True),
        sa.Column("form_number", sa.String(length=5), nullable=True),
        sa.Column("consignment_number", sa.String(length=5), nullable=True),
        sa.Column("location", sa.String(length=50), nullable=True),
        sa.Column("notes", sa.String(), nullable=True),
        sa.CheckConstraint(
            "(employee_id IS NULL) != (department_id IS NULL)",
            name=op.f("ck_equipments_check_employee_or_department"),
        ),
        sa.CheckConstraint(
            "consignment_number IS NULL OR department_id IS NOT NULL",
            name=op.f("ck_equipments_check_consignment_requires_department"),
        ),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["departments.slug"],
            name=op.f("fk_equipments_department_id_departments"),
        ),
        sa.ForeignKeyConstraint(
            ["document_in_id"],
            ["documents.id"],
            name=op.f("fk_equipments_document_in_id_documents"),
        ),
        sa.ForeignKeyConstraint(
            ["document_out_id"],
            ["documents.id"],
            name=op.f("fk_equipments_document_out_id_documents"),
        ),
        sa.ForeignKeyConstraint(
            ["employee_id"],
            ["employees.slug"],
            name=op.f("fk_equipments_employee_id_employees"),
        ),
        sa.ForeignKeyConstraint(
            ["name_id"],
            ["equipment_names.id"],
            name=op.f("fk_equipments_name_id_equipment_names"),
        ),
        sa.PrimaryKeyConstraint("it", name=op.f("pk_equipments")),
    )
    op.drop_table("equipment")
    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "equipment",
        sa.Column("it", sa.VARCHAR(length=7), nullable=False),
        sa.Column("name_id", sa.INTEGER(), nullable=False),
        sa.Column("model", sa.VARCHAR(), nullable=True),
        sa.Column("serial_number", sa.VARCHAR(length=50), nullable=False),
        sa.Column("manufacture_date", sa.VARCHAR(length=7), nullable=True),
        sa.Column("arrival_date", sa.VARCHAR(length=7), nullable=True),
        sa.Column("document_in_id", sa.INTEGER(), nullable=True),
        sa.Column("document_out_id", sa.INTEGER(), nullable=True),
        sa.Column("status", sa.VARCHAR(length=9), nullable=False),
        sa.Column("employee_id", sa.VARCHAR(), nullable=True),
        sa.Column("department_id", sa.VARCHAR(), nullable=True),
        sa.Column("form_number", sa.VARCHAR(length=5), nullable=True),
        sa.Column("location", sa.VARCHAR(length=50), nullable=True),
        sa.Column("notes", sa.VARCHAR(), nullable=True),
        sa.Column("consignment_number", sa.VARCHAR(length=5), nullable=True),
        sa.CheckConstraint(
            "(employee_id IS NULL) != (department_id IS NULL)",
            name="ck_equipment_check_employee_or_department",
        ),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["departments.slug"],
            name="fk_equipment_department_id_departments",
        ),
        sa.ForeignKeyConstraint(
            ["document_in_id"],
            ["documents.id"],
            name="fk_equipment_document_in_id_documents",
        ),
        sa.ForeignKeyConstraint(
            ["document_out_id"],
            ["documents.id"],
            name="fk_equipment_document_out_id_documents",
        ),
        sa.ForeignKeyConstraint(
            ["employee_id"],
            ["employees.slug"],
            name="fk_equipment_employee_id_employees",
        ),
        sa.ForeignKeyConstraint(
            ["name_id"],
            ["equipment_names.id"],
            name="fk_equipment_name_id_equipment_names",
        ),
        sa.PrimaryKeyConstraint("it", name="pk_equipment"),
    )
    op.drop_table("equipments")
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
